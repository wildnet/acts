#!/bin/sh

# Exit if an uninitialised variable is read
set -u
# Exit if a pipeline exits non-zero
set -e

VERSION="1.3b3+wildNET"

if [ "$#" = "1" ] && [ "$1" = "--version" ]; then
    echo "acts version $VERSION"
    exit 0
fi

if [ "$#" = "1" ] && ([ "$1" = "-h" ] || [ "$1" = "--help" ]); then
    echo "usage: acts"
    echo
    echo "Configuration should be in /etc/acts.conf or /usr/local/etc/acts.conf"
    echo "See https://github.com/alexjurkiewicz/acts for more information."
    exit 0
fi

starttime=$(date +%s)

# set these so we can define the log_functions early
verbose=0
syslog=
log_error() {
    echo "Error: $*" >&2
    if [ -n "$syslog" ]; then
        logger -t "acts[$$]" -p "$syslog.warn" "level=error $*"
    fi
    exit 1
}
log_message() {
    if [ "$verbose" -ge 0 ]; then
        echo "Warning: $*" >&2
        if [ -n "$syslog" ]; then
            logger -t "acts[$$]" -p "$syslog.warn" "level=warn $*"
        fi
    fi
}
log_verbose() {
    if [ "$verbose" -ge 1 ]; then
        echo "Info: $*" >&2
        if [ -n "$syslog" ]; then
            logger -t "acts[$$]" -p "$syslog.info" "level=info $*"
        fi
    fi
}
log_debug() {
    if [ "$verbose" -ge 2 ]; then
        echo "Debug: $*" >&2
        if [ -n "$syslog" ]; then
            logger -t "acts[$$]" -p "$syslog.debug" "level=debug $*"
        fi
    fi
}

die() {
    log_error "$* action=exiting"
    exit 1
}

# PART 1: Initialisation
if [ -f acts.conf ]; then
    . ./acts.conf
    # Loading from CWD is for development/debugging, so be noisy when we do
    log_message "load-config source=$(pwd)/acts.conf message=\"Loading config from CWD is intended for development use only\""
elif [ -f /etc/acts.conf ]; then
    . /etc/acts.conf
    log_debug "load-config source=/etc/acts.conf"
elif [ -f /usr/local/etc/acts.conf ]; then
    . /usr/local/etc/acts.conf
    log_debug "load-config source=/usr/local/etc/acts.conf"
else
    die "load-config-error message=\"No $(pwd)/acts.conf, /etc/acts.conf or /usr/local/etc/acts.conf\""
fi
# Use default values if anything is not set
verbose="${verbose=0}"
hostname="${hostname=$(hostname -s)}"
uselocaltime="${uselocaltime=0}"
backuptargets="${backuptargets=}"
prebackupscript="${prebackupscript=}"
postbackupscript="${postbackupscript=}"
tarsnap="${tarsnap:=tarsnap}"
tarsnapbackupoptions="${tarsnapbackupoptions=}"
lockfile="${lockfile=/var/run/acts}"
LANG="${LANG=en_US.UTF-8}"
export LANG

# Parameter validation
if [ -z "$backuptargets" ]; then
    die "config-error message=\"\$backuptargets is not set in acts.conf.\""
fi

if [ "$uselocaltime" = 0 ]; then
    utc="-u"
    #tz="_UTC"
    tz=$(date -u "+%z%Z")
elif [ "$uselocaltime" = 1 ]; then
    utc=""
    #tz="_"$(date "+%Z")
    tz=$(date "+%z%Z")
else
    die "config-error message=\"invalid \$uselocaltime in acts.conf; valid options are 0 (for UTC) or 1 (for local time).\""
fi

# Create the lock. mkdir is atomic test/set, so use that instead of the typical test -f/touch combo
if [ -d "$lockfile" ]; then
    die "acts-error message=\"$lockfile exists referencing PID $(cat "$lockfile/pid" 2>/dev/null || echo "<none>"). Hint: If acts is not already running, rm -rf $lockfile.\""
else
    if output=$(mkdir "$lockfile" 2>&1); then
        echo $$ >"$lockfile/pid"
        log_debug "message=\"Created $lockfile/ with 'pid' referencing $$\""
    else
        die "acts-error message=\"Can't create lock $lockfile: $output\""
    fi
fi

trap 'trap - INT TERM EXIT ; echo Exiting unexpectedly. >&2 ; rm -f "$lockfile/pid"; rmdir "$lockfile" ; exit 1' INT TERM EXIT

# PART 2: Preparation
log_debug "Listing tarsnap archives"
if ! archives_unsorted=$($tarsnap --list-archives); then
    die "acts-tarsnap-error message=\"Couldn't get list of existing archives (Hint: is Tarsnap configured correctly?)\""
    exit 1
fi
archives=$(echo "$archives_unsorted" | sort -n)

# When is now?
# Instead of re-running date, be paranoid the day was microseconds away from ending
today=$(date $utc "+%Y-%m-%d_%H:%M:%S")
year=$(echo "$today" | cut -d_ -f1 | cut -d- -f1)
month=$(echo "$today" | cut -d_ -f1 | cut -d- -f2)
# day=$(echo "$today" | cut -d_ -f1 | cut -d- -f3) # unused

# Determine the archive type to create
if echo "$archives" | grep -E -q "^$hostname-yearly-$year"; then
    if echo "$archives" | grep -E -q "^$hostname-monthly-$year-$month"; then
        # There's a yearly and monthly backup already
        archivetype="daily"
    else
        # There was a yearly but no monthly backup
        archivetype="monthly"
    fi
else
    # There's no yearly backup
    archivetype="yearly"
fi
log_verbose "archive-type type=$archivetype"

# Run the pre-backup script
if [ -n "$prebackupscript" ]; then
    if [ -x "$prebackupscript" ]; then
        log_verbose "run-prebackupscript script=$prebackupscript..."
        $prebackupscript
    else
        die "acts-error message=\"prebackupscript $prebackupscript is not executable!\""
    fi
fi

# PART 3: Backup
backuprc=0 # Notice any failed backups
for dir in $backuptargets; do
    archive_starttime=$(date +%s)
    nicedirname=$(echo "$dir" | tr -d '/')
    archivename="$hostname-$archivetype-$today$tz-$nicedirname"
    log_verbose "backup-start type=$archivetype dir=/$dir name=$archivename"
    # Uncontrolled expansion is bad, but we have little choice. See https://github.com/koalaman/shellcheck/wiki/Sc2086
    # shellcheck disable=SC2086
    if ! output="$($tarsnap -c -f "$archivename" -C / $tarsnapbackupoptions "$dir" 2>&1 | tr '\n' "-")"; then
        log_message "backup-error type=$archivetype dir=/$dir output=\"$(echo $output | tr "-" " ")\""
        backuprc=1
    fi
    log_verbose "backup-data type=$archivetype dir=/$dir size=\"Total Compressed $(echo $output | cut -d- -f5 | tr "-" " ")\""
    archive_endtime=$(date +%s)
    log_verbose "backup-finish type=$archivetype dir=/$dir duration=$((archive_endtime - archive_starttime))s"
done
# Update the archive listing
archives=$($tarsnap --list-archives | sort -n)

# PART 4: Trim old backups.
if [ "$backuprc" != "0" ]; then
    die "acts-tarsnap-error One of the backups failed -- not deleting old backups"
fi

# We don't delete any yearly backups

# We keep 12 monthly backups
monthlybackups=$(echo "$archives" | grep "$hostname-monthly-" | cut -d_ -f1 | uniq | sort -rn)
if [ "$(echo "$monthlybackups" | wc -l)" -gt 12 ]; then
    log_debug 'message="More than 12 monthly backups, deleting the oldest"'
    echo "$monthlybackups" | tail -n +13 | while read -r archiveprefixtodel; do
        log_verbose "message=\"Deleting backup prefix $archiveprefixtodel*\""
        echo "$archives" | grep -E "^$archiveprefixtodel" | while read -r archivetodel; do
            log_debug "message=\"Deleting backup $archivetodel\""
            $tarsnap -d -f "$archivetodel"
        done
    done
else
    log_debug "message=\"Found $(echo "$monthlybackups" | wc -l) monthly backups, not deleting\""
fi

# We keep 31 daily backups
dailybackups=$(echo "$archives" | grep "$hostname-daily-" | cut -d_ -f1 | uniq | sort -rn)
if [ "$(echo "$dailybackups" | wc -l)" -gt 31 ]; then
    log_debug "message=\"More than 30 daily backups, deleting the oldest\""
    echo "$dailybackups" | tail -n +32 | while read -r archiveprefixtodel; do
        log_verbose "message=\"Deleting backup prefix $archiveprefixtodel*\""
        echo "$archives" | grep -E "^$archiveprefixtodel" | while read -r archivetodel; do
            log_debug "message=\"Deleting backup $archivetodel\""
            $tarsnap -d -f "$archivetodel"
        done
    done
else
    log_debug "message=\"Found $(echo "$dailybackups" | wc -l) daily backups, not deleting any\""
fi

# Run the post-backup script
if [ -n "$postbackupscript" ]; then
    if [ -x "$postbackupscript" ]; then
        log_verbose "run-prebackupscript script=$postbackupscript..."
        $postbackupscript
    else
        die "acts-error message=\"postbackupscript $postbackupscript is not executable!\""
    fi
fi

trap - INT TERM EXIT
rm -f "$lockfile/pid"
rmdir "$lockfile"

endtime=$(date +%s)
log_verbose "acts-finished duration=$((endtime - starttime))s action=exiting"
exit 0
